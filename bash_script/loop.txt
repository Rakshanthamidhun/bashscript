#!/bin/bash
#if statement
VAR=5
if [ $VAR -gt 4 ]
then 
    echo "good"
fi 

#logical operators
VAR=8
if [[ $VAR -gt 4 ]] && [[ $VAR -lt 10 ]]
then 
    echo "and operation"
    echo "$VAR is between 4 and 10" 
fi

if [[ $VAR -gt 4 ]] || [[ $VAR -lt 5 ]]
then
    echo "or ie either operation"
    echo "$VAR is not between 4 and 5"
fi

#if elif else 
marks=99
if [ $marks -gt 90 ]
then 
    echo "greater then 90"
elif [ $marks -gt 80 ]
then 
    echo "greater than 80"
elif [ $marks -gt 50 ]
then
    echo "study hard"
else
    echo "NOT okay failed"
fi 	

#nested if
number=89
if [ $number -gt 80 ]
then
	if [ $number -lt 90 ]
	then
	     echo "less than 90"
	fi
fi 

# = and == operator
VAR="hello"
WAR="world"
if [ $VAR = $WAR ]
then 
	if [ $VAR == $WAR ]
	then
		echo "equal & double operator are same"    
	fi
else
	echo "equal & double operator are not same"
fi

#not equal
VAR="come"
WAR="in"
if [ $VAR != $WAR ]
then
    echo "not same strings"
else
    echo "same strings"
fi

# strings are same alphabetically
sleep="hello"
wake="why"
#if [[ $sleep == $wake ]] (can use it also)
if [[ $sleep != $wake ]]
then
    echo "alphabetically not same"
else
    echo "alphabetically are ame"
fi

#test string is null
wake=''
#if [ $wake =" " ]
if [[ $wake = '' ]] 
then
    echo "null string"
else
    echo "not null string"
fi

sleep='hello'
if [[ $sleep = '' ]]
then
    echo "null string"
else
    echo "not null string"
fi

#greater than or equal
num=20
if (( $num >= 25 )) && (( $num <= 30 ))
then
    echo "greater than less than !"
else
   echo "$num --> and with >= <= failed"
fi

#equality of variable
x=50
y=59
if (( $x == $y ))
then 
    echo "compared variables are equal"
else
    echo " vaiables not equal"
fi

#text file exists
file=rasksh.txt
if [ -f "$file" ]
then
    echo "file exists"
else
    echo "file doesn't exists"
fi	

#text file is zero size
text=sample.txt
if [ -s "$text" ]
then
    echo "file is not size zero"
else
    echo "file zero size"
fi

#dir exists
path=/nfs/sc/disks/swuser_work_rmageshx
if [[ -d $path ]]
then 
    echo "$path is directory not file"
elif [[ -f $path ]]
then 
    echo "$path is file not dir"
else
    echo "$path is not valid"
fi

#file is symbolic link
var1=link1
if [[ -L $var1 ]]
then
    echo "$var1 is symbolic link"
else
    echo "$var1 is not symbolic link"
fi

#text file has read, write, execute permission
ls -al
var1=sample.txt
if [ -r $var1 ]
then
    echo "$var1 has read permission"
else
    echo "$var1 no read permission"
fi

if [ -w $var1 ]
then
    echo "$var1 has write permission"
else
    echo "$var1 no write permission"
fi

if [[ -x $var1 ]]
then
    echo "$var1 has excecute permission"
else
    echo "$var1 no execute permission"
fi

chmod +x $var1
if [[ -x $var1 ]]
then
    echo "$var1 has excecute permission"
else
    echo "$var1 no execute permission"
fi

#case conditional statement with numbers
num=44440
case $num in
     10)
	echo "its 10 !"
	;;
     20)
	echo "20 number!"
	;;
     30)
	echo "it is 30 !"
	;;
     *)
	echo "something else :("
	;;
esac		 

#case conditional statement with strings
bike="KTM"
case $bike in
     apache)
        echo "its apache!"
        ;;
     hero)
        echo "hero bike!"
        ;;
     KTM)
        echo "KTM bike  !"
        ;;
     *)
        echo "something else :("
        ;;
esac

#case conditional statement with wildcards
case $1 in
     req*)
        echo "request!"
        ;;
     meet*)
        echo "meeting time!"
        ;;
     *)
        echo "default statement"
        ;;
esac
 # exceute above as sh loop.txt can we meet at 11? (default)
#sh loop.txt meet me at 10 (meeting time)
# if $2 ....sh loop.txt meet meet (meeting time), sh loop.txt meet me meet (default) 

#execute commands with backticks
ls -al
chown midhun \smaple.txt
ls -al

#excute command in dollar paranthesis variable
var=$(cat sample.txt)
echo "$var"

#execute command & capture STDOUT
var=$(cat sample.txt)
echo "$var" > output.txt

#execute command & capture STDERR
var=$(cat sample.txt)
$var > output.txt

#execute command & capture return code
var=$(cat sample.txt)
echo "$var" 
echo $? > return.txt

#bash exec (terminates prev commands & executes current command)
exec > temp
echo "hello world"

#eval command without exec works in terminal else in file
eval echo "correct eval"

#for loop in list
for i in 1 2 3 4 5;do
    echo "values: $i"
done	

#for in range of numbers
for i in {10..15};do
    echo "range val: $i"
done

#for loop output of command
for i in $(cat entry.txt);do
     echo "$i"
done			

#for loop for files in dir
for i in ./*.txt; do
    echo $i 
done

#for loop with conditional break
echo "break"
for i in {1..7}; do
    if (( $i < 5 )); then
	echo "$i";
    else
	break;
    fi
done

#for loop with conditional continue
echo "continue"
for i in {1..7}
do
    if (( $i == 5 ))
    then
        continue
    else
        echo $i
    fi
done

#while looop
i=0
while (( ++i <= 5 )); do
    echo "counter is at $i"
done
