#!/bin/bash
#read text from file and print in screen
FILE=file1.txt
n=1
while read line; do
   echo "Line-$n : $line"
   n=$((n+1))
done < $FILE

#read text from file using if
FILE=file1.txt
n=1
while read line; do
   echo "Line-$n : $line"
   n=$((n+1))
   if ((n>3)); then
	break
   fi
done < $FILE

#basic read command
echo "please enter 3 words followed by enter:"
read first final romia
echo "hello $first $final $romia"

#read command into array
echo "give i/p to enter into array:"
read -a arrayVar
echo "array members:"
for i in ${arrayVar[@]}; do
   echo "$i"
done

#read command with delimiter
echo "enter name of car & model:"
IFS='|' read car model <<< 'BMW | i8'
echo "hello $car car is of $model"

#read command with timeout
date
read -t 14 -p "press enter or wait for 14 secs"
date
 
#menu option with select command
PS3='Please enter car name:' #PS3 is standard
cars=("BMW" "Toyota" "Honda" "Quit")
select car in "${cars[@]}"
do
   case $car in
      "BMW")
           echo "You choose BMW"
           ;;
      "Toyota")
           echo "You choose Toyota"
           ;;
      "Honda")
           echo "You choose Honda"
           ;;
      "Quit")
           break
           ;;
   *) echo "Invalid output $REPLY";;
   esac
done

#menu option with select command from array variable
PS3='Please enter car name:' #PS3 is standard
menu_from_array()
{
   select item ; do
     if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ]; then
       echo "Selected car is $item"
       break;
     else
       echo "Wrong selection: Select any number from 1-$#"
     fi
   done
}

cars=('BMW' 'Honda' 'Benz')
menu_from_array "${cars[@]}"

#split string by space
line="This line has more spaces"
for word in $line; do
   echo "$word"
done

#split string by custom delimiter
line="GYDGUHI!JJjjf!jhruhhf!jfj!"
delimiter=!
s=$line$delimiter
array=();
while [[ $s ]]; do
   echo "${s%%"$delimiter"*}" #no space in between
   s=${s#*"$delimiter"} #no space in between
done;

#split string into array variable
line="GYD!GUHI,JJjjf,j!hru,hhf,jfj,"
IFS=',!'
read -ra addr <<< "$line"
for i in "${addr[@]}"; do
    echo "$i"
done

IFS=' '

#split string by multi-byte delimiter
line="WeIJKareIJKlivingIJKInIJKaIJKInsiderIJKice"
delimiter="IJK"
lineLen=${#line}
d=${#delimiter}
i=0
Len=0
P=0
mArr=()
while [ $i -lt $lineLen ]; do
   if [ $delimiter == ${line:$i:$d} ]; then
        mArr+=(${line:P:$Len})
        P=$(( i + d ))
        Len=0
        i=$(( i + d ))
   fi
   i=$(( i + 1 ))
   Len=$(( Len + 1 ))
done
mArr+=(${line:P:$Len})
declare -p mArr

#parse command line optons with positions
echo $1 $2
''' run output as sh file_name.sh joe keerthan'''

#parse command line optons with shift command
shift 0
echo 0=$0 
echo 1=$1
echo 2=$2
echo 3=$3

''' run output as sh file_name.sh joe keerthan'''

#parse command line optons using get opt
while getopts 'xyz:' OPTION; do
   case "$OPTION" in
	x)
	  echo "this is x"
	  ;;
	y)
	  echo "this is y"
	  ;;
	z)
	  z="orange"
	  echo "value provided by $z"
	  ;;
	?)
	echo "script usage: $(basename $0) [-x] [-y] [-z]" >&2
	;;
   esac
done
shift "$((OPTIND -1))"
''' sh task.sh -z john, sh task.sh -y '''

#read password from STDIN without printing it
echo -n "Type a password:"
read -s password
echo " "
echo "Your password is: $password"

#pipe command (wc:word count)
cat car.txt | sort
cat car.txt | wc -w

#read data from STDIN and send data with pipe
cat car.txt | while read x; do
echo $x ; done | cat > new.txt
 
#echo to bc command for math expression simple
var1=50
var2=10
echo $var1 + $var2 |bc
echo $var1 - $var2 |bc
echo $var1 \* $var2 |bc
echo $var1 / $var2 |bc
echo $var1 % $var2 |bc

#echo to bc command for math expression complex (complex results are obtained check)
echo 'ibase=16; B42K' | bc
echo 'ibase=16; 7J72+F39F' | bc
echo 'ibase=16; M42E' | bc
echo 'ibase=16; 8N72+T39K' | bc
echo '7-4.15' | bc

#function prints common text, call multiple times
function func()
{
  echo 'hello, this is a text' 
}
func
func

#function return a string
function func()
{
  retstr= echo 'hello, this is a text'
}
retstr='bash is excellent'
echo $retstr
func
echo $retstr

#function takes param returns sum
function func()
{
  sum=$(($1 + $2))
  echo "sum is : $sum"
}
func 4 6

#TPUT command to print string
tput bold
echo "This is tput command to print string in bold"
underline=`tput smul`
nounderline=`tput rmul`
bold=`tput bold`
normal=`tput sgr0`

#TPUT command to print number (column of terminal) 
tput cols

#TPUT command to move cursor in terminal to arbitory location
tpup cup 10 10 
 
#tput to clear terminal
tput clear

#tput to print attributes of terminal
tput longname
tput -V

#tput to print terminal attribute complex
tput longname
tput -V
tput lines
tput cols
tput colors

#assign string variable with declare
declare var="this is a variable"
echo $var

#assign string variable with declare
declare var="this is a variable"
echo $var

if [ -z ${var+a} ]; then
    echo "var is not declared"
else
    echo "var is declared and set to $var"
    echo "var is declared and set to '$var'"
fi


<<here_doc
#until loop based on file size (need to check)
FILENAME=`basename "$0"`
echo FILENAME
TMP_FILE = "./raksh1.txt"
TARGET_FILE = "./raksh2.txt"
cat $FILENAME > $TARGET_FILE

FILESIZE = 0
until [[ $FILESIZE -gt 2048 ]]; do
   cp $TARGET_FILE $TMP_FILE
   cat $TMP_FILE >> $TARGET_FILE

   FILESIZE=`du $TARGET_FILE | awk '{print $1}'`
   echo "size of file: $FILESIZE Bytes"
   sleep 1
done

echo "new file exceeds 2KB+"
heredoc
